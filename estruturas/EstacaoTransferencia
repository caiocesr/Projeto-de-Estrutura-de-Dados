package view.estruturas;

import view.caminhoes.*;

public class EstacaoTransferencia {
    private int id;
    private Fila<CaminhaoPequeno> filaDescarregamento;
    private Lista<CaminhaoGrande> caminhoesGrandes;
    private int tempoMaximoEspera;
    private int totalDescarregamentos;

    public EstacaoTransferencia(int id, int tempoMaximoEspera) {
        this.id = id;
        this.filaDescarregamento = new Fila<>();
        this.caminhoesGrandes = new Lista<>();
        this.tempoMaximoEspera = tempoMaximoEspera;
        this.totalDescarregamentos = 0;

        adicionarCaminhaoGrande();
    }

    public void adicionarCaminhaoParaDescarregar(CaminhaoPequeno caminhao) {
        filaDescarregamento.enfileirar(caminhao);
        caminhao.setStatus("Na fila da estação");
    }

    public void processarDescarregamento() {
        if (!filaDescarregamento.estaVazia()) {
            No<CaminhaoPequeno> atual = filaDescarregamento.getPrimeiro();
            while (atual != null) {
                atual.getDado().incrementarTempoEspera();
                atual = atual.getProximo();
            }

            CaminhaoPequeno caminhao = filaDescarregamento.frente();
            CaminhaoGrande caminhaoGrande = encontrarCaminhaoGrandeDisponivel();

            if (caminhaoGrande != null) {
                int cargaTransferida = Math.min(caminhao.getCargaAtual(),
                        caminhaoGrande.getCapacidadeMaxima() - caminhaoGrande.getCargaAtual());

                caminhaoGrande.receberCarga(cargaTransferida);
                caminhao.setCargaAtual(0);
                caminhao.setStatus("Retornando para coleta");

                filaDescarregamento.desenfileirar();
                totalDescarregamentos++;
            }

            if (tempoEsperaMuitoAlto()) {
                adicionarCaminhaoGrande();
            }
        }

        for (int i = 0; i < caminhoesGrandes.tamanho(); i++) {
            CaminhaoGrande caminhao = caminhoesGrandes.obter(i);
            caminhao.executarOperacao();
        }
    }

    private CaminhaoGrande encontrarCaminhaoGrandeDisponivel() {
        for (int i = 0; i < caminhoesGrandes.tamanho(); i++) {
            CaminhaoGrande caminhao = caminhoesGrandes.obter(i);
            if (caminhao.isEstaNaEstacao() && !caminhao.estaLotado()) {
                return caminhao;
            }
        }
        return null;
    }

    private boolean tempoEsperaMuitoAlto() {
        if (filaDescarregamento.estaVazia()) return false;

        No<CaminhaoPequeno> atual = filaDescarregamento.getPrimeiro();
        while (atual != null) {
            if (atual.getDado().getTempoEspera() > tempoMaximoEspera) {
                return true;
            }
            atual = atual.getProximo();
        }
        return false;
    }

    private void adicionarCaminhaoGrande() {
        int novoId = caminhoesGrandes.tamanho() + 1;
        CaminhaoGrande novoCaminhao = new CaminhaoGrande(novoId, 3); // Tolerância de 3 turnos
        caminhoesGrandes.adicionar(novoCaminhao);
    }

    public int getId() { return id; }
    public int getTamanhoFila() { return filaDescarregamento.tamanho(); }
    public int getNumCaminhoesGrandes() { return caminhoesGrandes.tamanho(); }
    public int getTotalDescarregamentos() { return totalDescarregamentos; }
    public Lista<CaminhaoGrande> getCaminhoesGrandes() { return caminhoesGrandes; }
}
